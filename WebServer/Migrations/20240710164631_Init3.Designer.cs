// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebServer.Data;

#nullable disable

namespace WebServer.Migrations
{
    [DbContext(typeof(WaterDbContext))]
    [Migration("20240710164631_Init3")]
    partial class Init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Business.Entities.Consumers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Ref_KatoId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Ref_KatoId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("WebServer.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bin")
                        .HasColumnType("text");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<string>("FullNameKk")
                        .HasColumnType("text");

                    b.Property<string>("FullNameRu")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<long>("KatoCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebServer.Models.Account_Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account_Roles");
                });

            modelBuilder.Entity("WebServer.Models.ActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата утверждения");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата завершения утвержденной формы");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор пользователя удалившего форму");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Информация о создании группы форм");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean")
                        .HasComment("Идентификатор удаления");

                    b.HasKey("Id");

                    b.ToTable("ApprovedForms");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedFormItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormId")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasComment("Порядок отображения");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean")
                        .HasComment("Идентификатор удаления");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("boolean")
                        .HasComment("Признак села");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasComment("Сервис. 0 - водоснабжение, 1- водоотведение, 2- водопровод");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Заголовок Формы (короткий)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedFormId");

                    b.ToTable("ApprovedFormItems");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedFormItemColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasComment("Тип хранимых данных: Label(Просто отображение), IntegerType, DecimalType, StringType, BooleanType, DateType, CalcType");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasComment("Порядок отображения");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("NameKk")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Заголовок столбца на казахском");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Заголовок столбца на русский");

                    b.Property<bool>("Nullable")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportCode")
                        .HasColumnType("text")
                        .HasComment("уникальный код для отчета внутри формы, может дублироваться в других формах");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedFormItemId");

                    b.ToTable("ApprovedFormItemColumns");
                });

            modelBuilder.Entity("WebServer.Models.Business_Dictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessDecription")
                        .HasColumnType("text")
                        .HasComment("Бизнес описание");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Код*");

                    b.Property<string>("DescriptionKk")
                        .HasColumnType("text")
                        .HasComment("Пояснение на каз");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasComment("Пояснение на рус");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean")
                        .HasComment("Удален");

                    b.Property<string>("NameKk")
                        .HasColumnType("text")
                        .HasComment("Наименование на каз");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasComment("Наименование на рус");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasComment("ключ на ИД (своего типа или стороннего)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип*");

                    b.HasKey("Id");

                    b.ToTable("Business_Dictionary");
                });

            modelBuilder.Entity("WebServer.Models.ColumnLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormItemColumnId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedFormItemColumnId");

                    b.ToTable("ColumnLayouts");
                });

            modelBuilder.Entity("WebServer.Models.Data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverFormColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReportFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("WebServer.Models.NetworkLengthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdForm")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ProtyzhKanalSeteyIznos")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность канализационных сетей, км (по состоянию на конец отчетного года) Износ, % гр.83/гр.82");

                    b.Property<int?>("ProtyzhKanalSeteyObsh")
                        .HasColumnType("integer")
                        .HasComment("Протяженность канализационных сетей, км (по состоянию на конец отчетного года) общая, км");

                    b.Property<int?>("ProtyzhKanalSeteyVtomIznos")
                        .HasColumnType("integer")
                        .HasComment("Протяженность канализационных сетей, км (по состоянию на конец отчетного года) в том числе изношенных, км");

                    b.Property<int?>("ProtyzhNewSeteyVodoOtved")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность построенных (новых) сетей в отчетном году, км - водоотведения, км");

                    b.Property<int?>("ProtyzhNewSeteyVodoSnab")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность построенных (новых) сетей в отчетном году, км - водоснабжения, км");

                    b.Property<int?>("ProtyzhRekonSeteyVodoOtved")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность реконструированных (замененных) сетей в отчетном году, км - водоотведения, км");

                    b.Property<int?>("ProtyzhRekonSeteyVodoSnab")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность реконструированных (замененных) сетей в отчетном году, км - водоснабжения, км");

                    b.Property<int?>("ProtyzhRemontSeteyVodoOtved")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность отремонтированных (текущий/капитальный ремонт) сетей в отчетном году, км - водоотведения, км");

                    b.Property<int?>("ProtyzhRemontSeteyVodoSnab")
                        .HasColumnType("integer")
                        .HasComment("Общая протяженность отремонтированных (текущий/капитальный ремонт) сетей в отчетном году, км - водоснабжения, км");

                    b.Property<decimal?>("ProtyzhVodoSeteyIznos")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность водопроводных сетей, км (по состоянию на конец отчетного года) Износ, % гр.80/гр.79");

                    b.Property<int?>("ProtyzhVodoSeteyObsh")
                        .HasColumnType("integer")
                        .HasComment("Протяженность водопроводных сетей, км (по состоянию на конец отчетного года) общая, км");

                    b.Property<int?>("ProtyzhVodoSeteyVtomIznos")
                        .HasColumnType("integer")
                        .HasComment("Протяженность водопроводных сетей, км (по состоянию на конец отчетного года) в том числе изношенных, км");

                    b.HasKey("Id");

                    b.ToTable("NetworkLengthInfos");
                });

            modelBuilder.Entity("WebServer.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("NewWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("NewWaterSupplyNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность построенных (новых) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("ReconstructedNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность реконструированных (замененных) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("ReconstructedWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("RepairedWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("RepairedWaterSupplyNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность отремонтированных (текущий/капитальный ремонт) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("TotalPipelineLength")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность водопроводных сетей, км (по состоянию на конец отчетного года),общая, км");

                    b.Property<decimal>("TotalPopulation")
                        .HasColumnType("numeric")
                        .HasComment("численность населения (вся)");

                    b.Property<decimal>("TotalSewerNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность канализационных сетей, км (по состоянию на конец отчетного года),общая, км");

                    b.Property<decimal>("WornPipelineLength")
                        .HasColumnType("numeric")
                        .HasComment("в том числе изношенных, км");

                    b.Property<decimal>("WornSewerNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("в том числе изношенных, км");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Действие");

                    b.Property<string>("CodeAccessName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Код доступа");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование доступа");

                    b.Property<string>("TypeAccessName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип доступа");

                    b.HasKey("Id");

                    b.ToTable("Ref_Access");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Ref_Buildings");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Kato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReportable")
                        .HasColumnType("boolean");

                    b.Property<int?>("KatoLevel")
                        .HasColumnType("integer")
                        .HasComment("Категории населенных пунктов. 0-область,1-город,2-село,3-район");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentObl")
                        .HasColumnType("integer")
                        .HasComment("Область Астана,Алматы...сам на себя ссылка, если район код области");

                    b.Property<int?>("ParentRaion")
                        .HasColumnType("integer")
                        .HasComment("Если это район, он смотрит сам на себя, если это село, код района,");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Ref_Katos");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Код роли");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип роли");

                    b.HasKey("Id");

                    b.ToTable("Ref_Roles");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Role_Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasComment("Айди roles");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("RoleId");

                    b.ToTable("Ref_Role_Access");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ref_Statuses");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefKatoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefKatoId");

                    b.ToTable("Ref_Streets");
                });

            modelBuilder.Entity("WebServer.Models.ReportSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Report_FormId")
                        .HasColumnType("uuid");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Report_FormId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ReportSuppliers");
                });

            modelBuilder.Entity("WebServer.Models.Report_Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<bool>("HasStreets")
                        .HasColumnType("boolean")
                        .HasComment("Наличие улиц в селе");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefKatoId")
                        .HasColumnType("integer");

                    b.Property<int>("RefStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ReportMonthId")
                        .HasColumnType("integer");

                    b.Property<int>("ReportYearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedFormId");

                    b.HasIndex("RefKatoId");

                    b.HasIndex("RefStatusId");

                    b.ToTable("Report_Forms");
                });

            modelBuilder.Entity("WebServer.Models.SeloDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("KodNaselPunk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KodOblast")
                        .HasColumnType("text");

                    b.Property<string>("KodRaiona")
                        .HasColumnType("text");

                    b.Property<string>("NameNaselPunk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SeloFormId")
                        .HasColumnType("uuid");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeloFormId");

                    b.ToTable("SeloDocuments");
                });

            modelBuilder.Entity("WebServer.Models.SeloForms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ObshKolChelNasPun")
                        .HasColumnType("integer")
                        .HasComment("Общая численность населения в сельских населенных пунктах (человек)");

                    b.Property<int?>("ObshKolDomHoz")
                        .HasColumnType("integer")
                        .HasComment("Общее количество домохозяйств (квартир, ИЖД)");

                    b.Property<int?>("ObshKolSelNasPun")
                        .HasColumnType("integer")
                        .HasComment("Общее количество сельских населенных пунктов в области(единиц)");

                    b.Property<Guid?>("ObslPredpId")
                        .HasColumnType("uuid")
                        .HasComment("Обслуживающее предприятие");

                    b.Property<Guid?>("SobstId")
                        .HasColumnType("uuid")
                        .HasComment("в чьей собственности находится");

                    b.Property<bool?>("StatusOpor")
                        .HasColumnType("boolean")
                        .HasComment("Статус села опорное");

                    b.Property<bool?>("StatusPrigran")
                        .HasColumnType("boolean")
                        .HasComment("Статус села приграничные");

                    b.Property<string>("StatusProch")
                        .HasColumnType("text")
                        .HasComment("Статус села прочие");

                    b.Property<bool?>("StatusSput")
                        .HasColumnType("boolean")
                        .HasComment("Статус села спутниковое");

                    b.Property<DateTime?>("YearSystVodoSnab")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Год постройки системы водоснабжения");

                    b.HasKey("Id");

                    b.ToTable("SeloForms");
                });

            modelBuilder.Entity("WebServer.Models.SettingsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingsValues");
                });

            modelBuilder.Entity("WebServer.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KatoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KatoId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebServer.Models.TariffInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdForm")
                        .HasColumnType("uuid");

                    b.Property<int?>("TarifVodoOtvedBudzh")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоотведение бюджетным организациям, тенге/м3");

                    b.Property<int?>("TarifVodoOtvedFizL")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоотведение физическим лицам/населению, тенге/м3");

                    b.Property<int?>("TarifVodoOtvedUsred")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоотведение усредненный, тенге/м3");

                    b.Property<int?>("TarifVodoOtvedYriL")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоотведение юридическим лицам, тенге/м3");

                    b.Property<int?>("TarifVodoSnabBudzh")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоснабжение бюджетным организациям, тенге/м3");

                    b.Property<int?>("TarifVodoSnabFizL")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоснабжение физическим лицам/населению, тенге/м3");

                    b.Property<int?>("TarifVodoSnabUsred")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоснабжение усредненный, тенге/м3");

                    b.Property<int?>("TarifVodoSnabYriL")
                        .HasColumnType("integer")
                        .HasComment("Уровень тарифов водоснабжение юридическим лицам, тенге/м3");

                    b.HasKey("Id");

                    b.ToTable("TariffInfos");
                });

            modelBuilder.Entity("WebServer.Models.Tariff_Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TariffAverage")
                        .HasColumnType("numeric")
                        .HasComment("усредненный, тенге/м3");

                    b.Property<decimal>("TariffBudget")
                        .HasColumnType("numeric")
                        .HasComment("бюджетным организациям, тенге/м3");

                    b.Property<decimal>("TariffIndividual")
                        .HasColumnType("numeric")
                        .HasComment("физическим лицам/населению, тенге/м3");

                    b.Property<decimal>("TariffLegal")
                        .HasColumnType("numeric")
                        .HasComment("юридическим лицам, тенге/м3");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Tariff_Level");
                });

            modelBuilder.Entity("WebServer.Models.Universal_Refference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessDecription")
                        .HasColumnType("text")
                        .HasComment("Бизнес описание");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Код*");

                    b.Property<string>("DescriptionKk")
                        .HasColumnType("text")
                        .HasComment("Пояснение на каз");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text")
                        .HasComment("Пояснение на рус");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean")
                        .HasComment("Удален");

                    b.Property<string>("NameKk")
                        .HasColumnType("text")
                        .HasComment("Наименование на каз");

                    b.Property<string>("NameRu")
                        .HasColumnType("text")
                        .HasComment("Наименование на рус");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasComment("ключ на ИД (своего типа или стороннего)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Тип*");

                    b.HasKey("Id");

                    b.ToTable("Universal_Refferences");
                });

            modelBuilder.Entity("WebServer.Models.WaterDisposalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CentrVodOtvedBydzhOrg")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение в том числе бюджетных организаций (единиц)");

                    b.Property<decimal?>("CentrVodOtvedDostypKolChel")
                        .HasColumnType("numeric")
                        .HasComment("Централизованное водоотведение Доступ к централизованному водоотведению по численности населения, в % гр.48/гр.9 *100");

                    b.Property<decimal?>("CentrVodOtvedDostypKolNasPunk")
                        .HasColumnType("numeric")
                        .HasComment("Централизованное водоотведение Доступ к централизованному водоотведению по количеству сельских населенных пунктов, в % гр.47/гр.8 *100");

                    b.Property<int?>("CentrVodOtvedFactPostypStochVod")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Фактически поступило сточных вод в канализационно-очистные сооружения (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedFactPostypStochVod1")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение В том числе За I квартал (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedFactPostypStochVod2")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение В том числе За II квартал (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedFactPostypStochVod3")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение В том числе За III квартал (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedFactPostypStochVod4")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение В том числе За IV квартал (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedFizLic")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение в том числе физических лиц/население (единиц)");

                    b.Property<decimal?>("CentrVodOtvedIznos")
                        .HasColumnType("numeric")
                        .HasComment("Централизованное водоотведение Износ канализационно- очистных сооружений, в %");

                    b.Property<int?>("CentrVodOtvedKolAbonent")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Кол-во абонентов, проживающих в данных сельских населенных пунктах (единиц)");

                    b.Property<int?>("CentrVodOtvedKolChel")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Численность населения, проживающего в данных сельских населенных пунктах (человек)");

                    b.Property<int?>("CentrVodOtvedKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Кол-во сельских населенных пунктов (единиц)");

                    b.Property<int?>("CentrVodOtvedNalich")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Наличие канализационно- очистных сооружений (единиц)");

                    b.Property<int?>("CentrVodOtvedNalichMechan")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение в том числе только с механичес-кой очисткой (еди-ниц)");

                    b.Property<int?>("CentrVodOtvedNalichMechanBiolog")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение в том числе с механической и биологической очист-кой (еди-ниц)");

                    b.Property<int?>("CentrVodOtvedObiemStochVod")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Объем сточных вод, соответствующей нормативной очистке по собственному лабораторному мониторингу за отчетный период (тыс.м3)");

                    b.Property<int?>("CentrVodOtvedOhvatKolChel")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Числен-ность населе-ния, охваченного действующими канализационно- очистными сооружениями (человек)");

                    b.Property<decimal?>("CentrVodOtvedOhvatNasel")
                        .HasColumnType("numeric")
                        .HasComment("Централизованное водоотведение Охват населения очисткой сточных вод, в % гр.60/гр.9*100");

                    b.Property<int?>("CentrVodOtvedProizvod")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение Производительность канализационно-очистных сооружений (проектная)");

                    b.Property<decimal?>("CentrVodOtvedUrovenNorm")
                        .HasColumnType("numeric")
                        .HasComment("Централизованное водоотведение Уровень нормативно- очищенной воды, % гр.67/гр.62 * 100");

                    b.Property<int?>("CentrVodOtvedYriLic")
                        .HasColumnType("integer")
                        .HasComment("Централизованное водоотведение в том числе юридических лиц (единиц)");

                    b.Property<int?>("DecentrVodoOtvedKolChel")
                        .HasColumnType("integer")
                        .HasComment("Децентрализованное водоотведение Численность населения, проживающего в данных сельских населенных пунктах (человек)");

                    b.Property<int?>("DecentrVodoOtvedKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Децентрализованное водоотведение Кол-во сельских населенных пунктов (единиц)");

                    b.Property<Guid>("IdForm")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WaterDisposalInfos");
                });

            modelBuilder.Entity("WebServer.Models.WaterSupplyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CentrVodoIndivPriborUchVodyASYE")
                        .HasColumnType("integer")
                        .HasComment("в том числе с дистанционной передачей данных в АСУЭ обслуживающего предприятия (единиц)");

                    b.Property<decimal?>("CentrVodoIndivPriborUchVodyOhvat")
                        .HasColumnType("numeric")
                        .HasComment("Охват индивидуальными приборами учета воды, % гр.27/гр. 23*100");

                    b.Property<int?>("CentrVodoIndivPriborUchVodyVsego")
                        .HasColumnType("integer")
                        .HasComment("Всего установлено индивидуальных приборов учета воды по состоянию на конец отчетного года (единиц)");

                    b.Property<int?>("CentrVodoSnabBudzhOrg")
                        .HasColumnType("integer")
                        .HasComment("в том числе бюджетных организаций (единиц)");

                    b.Property<int?>("CentrVodoSnabFizLic")
                        .HasColumnType("integer")
                        .HasComment("в том числе физических лиц/население (единиц)");

                    b.Property<int?>("CentrVodoSnabKolAbon")
                        .HasColumnType("integer")
                        .HasComment("Кол-во абонентов, охваченных централизованным водоснабжением (единиц)");

                    b.Property<int?>("CentrVodoSnabKolChel")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в данных сельских населенных пунктах (человек)");

                    b.Property<int?>("CentrVodoSnabKolNasPun")
                        .HasColumnType("integer")
                        .HasComment("Кол-во сельских населенных пунктов (единиц)");

                    b.Property<decimal?>("CentrVodoSnabObesKolChel")
                        .HasColumnType("numeric")
                        .HasComment("Обеспеченность централизованным водоснабжением по численности населения, % гр.20/гр.9 *100");

                    b.Property<decimal?>("CentrVodoSnabObesKolNasPunk")
                        .HasColumnType("numeric")
                        .HasComment("Обеспеченность централизованным водоснабжением по количеству сельских населенных пунктов, % гр.19/гр.8 *100");

                    b.Property<int?>("CentrVodoSnabYriLic")
                        .HasColumnType("integer")
                        .HasComment("в том числе юридических лиц (единиц)");

                    b.Property<int?>("DosVodoSnabKolChel")
                        .HasColumnType("integer")
                        .HasComment("Доступ населения к услугам водоснабжения Численность населения, проживающего в данных сельских населенных пунктах (человек)");

                    b.Property<int?>("DosVodoSnabKolPunk")
                        .HasColumnType("integer")
                        .HasComment("Доступ населения к услугам водоснабжения Количество сельских населенных пунктов (единиц)");

                    b.Property<decimal?>("DosVodoSnabPercent")
                        .HasColumnType("numeric")
                        .HasComment("Доступ населения к услугам водоснабжения, %");

                    b.Property<Guid>("IdForm")
                        .HasColumnType("uuid");

                    b.Property<int?>("KbmKolChel")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение КБМ Численность населения, проживающего в сельских населенных пунктах, где установлены КБМ (человек)");

                    b.Property<int?>("KbmKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение КБМ Количество сельских населенных пунктов, где установлено КБМ");

                    b.Property<decimal?>("KbmObespNasel")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение КБМ Обеспеченность населения услугами КБМ, % гр.32/гр.9*100");

                    b.Property<int?>("NeCtentrVodoKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Количество сельских населенных пунктов (единиц)");

                    b.Property<int?>("PrivVodaKolChel")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Привозная вода Численность населения, проживающего в сельских населенных пунктах, где используют привозную воду");

                    b.Property<int?>("PrivVodaKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Привозная вода Количество сельских населенных пунктов, жители которых используют привозную воду");

                    b.Property<decimal?>("PrivVodaObespNasel")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение Привозная вода Обеспеченность населения привозной водой, % гр.38/гр.9*100");

                    b.Property<int?>("PrvKolChel")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение ПРВ Численность населения, проживающего в сельских населенных пунктах, где установлены ПРВ (человек)");

                    b.Property<int?>("PrvKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение ПРВ Количество сельских населенных пунктов, где установлено ПРВ");

                    b.Property<decimal?>("PrvObespNasel")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение ПРВ Обеспеченность населения услугами  ПРВ, % гр.35/гр.9*100");

                    b.Property<decimal?>("SkvazhDolyaNaselOtkaz")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Доля населения, жители которых отказались от строительства ЦВ, установки КБМ и ПРВ  (наличие протоколов  отказа), гр.44/гр.9*100");

                    b.Property<decimal?>("SkvazhDolyaSelOtkaz")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Доля сел, жители которых отказались от  строительства ЦВ, установки КБМ и ПРВ, %, гр.43/гр.8*100");

                    b.Property<int?>("SkvazhKolChel")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Численность населения, проживающего в сельских населенных пунктах, где используют  воду из скважин и колодцев");

                    b.Property<int?>("SkvazhKolChelOtkaz")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Численность населения, жители которых отказались от строительства ЦВ, установки КБМ и ПРВ  (наличие протоколов  отказа)");

                    b.Property<int?>("SkvazhKolSelsNasPunk")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Количество сельских населенных пунктов, жители которых используют воду из скважин и колодцов");

                    b.Property<int?>("SkvazhKolSelsNasPunkOtkaz")
                        .HasColumnType("integer")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Количество сельских населенных пунктов, жители которых отказались от строительства ЦВ, установки КБМ и ПРВ  (наличие протоколов  отказа)");

                    b.Property<decimal?>("SkvazhObespNasel")
                        .HasColumnType("numeric")
                        .HasComment("Нецентрализованное водоснабжение Скважины, колодцы Обеспеченность  привозной водой, % гр.41/гр.9*100");

                    b.HasKey("Id");

                    b.ToTable("WaterSupplyInfos");
                });

            modelBuilder.Entity("Business.Entities.Consumers", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "Ref_Kato")
                        .WithMany()
                        .HasForeignKey("Ref_KatoId");

                    b.HasOne("WebServer.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ref_Kato");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebServer.Models.Account_Roles", b =>
                {
                    b.HasOne("WebServer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebServer.Models.ActionLog", b =>
                {
                    b.HasOne("WebServer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedFormItem", b =>
                {
                    b.HasOne("WebServer.Models.ApprovedForm", "ApprovedForm")
                        .WithMany("Items")
                        .HasForeignKey("ApprovedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedForm");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedFormItemColumn", b =>
                {
                    b.HasOne("WebServer.Models.ApprovedFormItem", "ApprovedFormItem")
                        .WithMany("Columns")
                        .HasForeignKey("ApprovedFormItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedFormItem");
                });

            modelBuilder.Entity("WebServer.Models.ColumnLayout", b =>
                {
                    b.HasOne("WebServer.Models.ApprovedFormItemColumn", "ApprovedFormItemColumn")
                        .WithMany()
                        .HasForeignKey("ApprovedFormItemColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedFormItemColumn");
                });

            modelBuilder.Entity("WebServer.Models.Pipeline", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Building", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Role_Access", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Access", "Access")
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Street", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "RefKato")
                        .WithMany()
                        .HasForeignKey("RefKatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefKato");
                });

            modelBuilder.Entity("WebServer.Models.ReportSupplier", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Report_Form")
                        .WithMany()
                        .HasForeignKey("Report_FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report_Form");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebServer.Models.Report_Form", b =>
                {
                    b.HasOne("WebServer.Models.ApprovedForm", "ApprovedForm")
                        .WithMany()
                        .HasForeignKey("ApprovedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Kato", "RefKato")
                        .WithMany()
                        .HasForeignKey("RefKatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Status", "RefStatus")
                        .WithMany()
                        .HasForeignKey("RefStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedForm");

                    b.Navigation("RefKato");

                    b.Navigation("RefStatus");
                });

            modelBuilder.Entity("WebServer.Models.SeloDocument", b =>
                {
                    b.HasOne("WebServer.Models.SeloForms", "SeloForm")
                        .WithMany()
                        .HasForeignKey("SeloFormId");

                    b.Navigation("SeloForm");
                });

            modelBuilder.Entity("WebServer.Models.Supplier", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "Kato")
                        .WithMany()
                        .HasForeignKey("KatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kato");
                });

            modelBuilder.Entity("WebServer.Models.Tariff_Level", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedForm", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WebServer.Models.ApprovedFormItem", b =>
                {
                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
